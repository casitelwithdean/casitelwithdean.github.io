<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>esp32</title>
    <link href="/2022/05/14/esp32/"/>
    <url>/2022/05/14/esp32/</url>
    
    <content type="html"><![CDATA[<p>1.其中 GPIO 34­39 仅用作输入管脚，</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mcp23017</title>
    <link href="/2022/05/13/mcp23017/"/>
    <url>/2022/05/13/mcp23017/</url>
    
    <content type="html"><![CDATA[<p>1.bank=0是指的IIC协议<br>2.IODIR就是用来决定输出还是输入   默认是输入<br>3。若想设置上拉输出的话  GPPU寄存器<br>4.若想写高低电平 就用GPIO    若想读GPIO也用读GPIO</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs c">       <span class="hljs-type">i2c_cmd_handle_t</span>  cmd = i2c_cmd_link_create();<br>        i2c_master_start(cmd);<br>        i2c_master_write_byte(cmd, <span class="hljs-number">0x20</span> &lt;&lt; <span class="hljs-number">1</span> | WRITE_BIT, ACK_CHECK_EN);<br>        i2c_master_write_byte(cmd, <span class="hljs-number">0x00</span>, ACK_CHECK_EN);<span class="hljs-comment">//Access IODIRA</span><br>        i2c_master_write_byte(cmd, <span class="hljs-number">0xFF</span>, ACK_CHECK_EN);<span class="hljs-comment">//FF就是全输入</span><br>        i2c_master_stop(cmd);<br>            i2c_master_cmd_begin(I2C_NUM_1, cmd, <span class="hljs-number">1000</span> / portTICK_RATE_MS);<br>        i2c_cmd_link_delete(cmd);<br><br>            cmd = i2c_cmd_link_create();<br>        i2c_master_start(cmd);<br>        i2c_master_write_byte(cmd, <span class="hljs-number">0x20</span> &lt;&lt; <span class="hljs-number">1</span> | WRITE_BIT, ACK_CHECK_EN);<br>        i2c_master_write_byte(cmd, <span class="hljs-number">0x0C</span>, ACK_CHECK_EN);<span class="hljs-comment">//Access GPPU</span><br>        i2c_master_write_byte(cmd, <span class="hljs-number">0xFF</span>, ACK_CHECK_EN);<span class="hljs-comment">//全部上拉</span><br>        i2c_master_stop(cmd);<br>            i2c_master_cmd_begin(I2C_NUM_1, cmd, <span class="hljs-number">1000</span> / portTICK_RATE_MS);<br>        i2c_cmd_link_delete(cmd);<br><br><br><span class="hljs-comment">//下面读取输入的值</span><br><br>    <span class="hljs-type">uint8_t</span> data=<span class="hljs-number">11</span>;<br>    cmd = i2c_cmd_link_create();<br>    i2c_master_start(cmd);<br>    i2c_master_write_byte(cmd, <span class="hljs-number">0x20</span> &lt;&lt; <span class="hljs-number">1</span> | I2C_MASTER_WRITE, ACK_CHECK_EN);<br>    i2c_master_write_byte(cmd, <span class="hljs-number">0X12</span>, ACK_CHECK_EN);<span class="hljs-comment">//</span><br>    i2c_master_start(cmd);<br>    i2c_master_write_byte(cmd, <span class="hljs-number">0x20</span> &lt;&lt; <span class="hljs-number">1</span> | I2C_MASTER_READ, ACK_CHECK_EN);<br>    i2c_master_read(cmd, &amp;data, <span class="hljs-number">100</span>, I2C_MASTER_LAST_NACK);<span class="hljs-comment">//</span><br>    i2c_master_stop(cmd);<br>    i2c_master_cmd_begin(I2C_NUM_1, cmd, <span class="hljs-number">1000</span> / portTICK_RATE_MS);<br>    i2c_cmd_link_delete(cmd);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>aliyun</title>
    <link href="/2022/05/13/aliyun/"/>
    <url>/2022/05/13/aliyun/</url>
    
    <content type="html"><![CDATA[<p>1.阿里云的网页制作很方便 类似于json那种结构体 现在功能定义一个功能，然后发布，标识符就是相当于指引，然后后面的””就是内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>esp32-cam</title>
    <link href="/2022/05/13/esp32-cam/"/>
    <url>/2022/05/13/esp32-cam/</url>
    
    <content type="html"><![CDATA[<p>1.引脚4是默认led<br>有些引脚不能够使用IIC     SDA 13  SCL 15是可以的   12好像不太行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>esp32</title>
    <link href="/2022/05/13/arduino-esp32/"/>
    <url>/2022/05/13/arduino-esp32/</url>
    
    <content type="html"><![CDATA[<p>1.arduino-ledc  三步走 如果忘记了那一步可能就会reboot</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs c">ledcSetup(PWMLightChannel, PWMFreq, PWMResolution);<br> pinMode(LIGHT_PIN, OUTPUT);    <br>ledcAttachPin(LIGHT_PIN, PWMLightChannel);<br>ledcWrite(PWMLightChannel, valueInt); <br></code></pre></td></tr></table></figure><hr><h2 id="date-2022-05-14-23-52-45"><a href="#date-2022-05-14-23-52-45" class="headerlink" title="date: 2022-05-14 23:52:45"></a>date: 2022-05-14 23:52:45</h2><p>2.IIC<br> 1.引入Wire.h<br> 2.Wire.begin(SDA,SCL)<br> 如下为MCP23017写操作<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"> <br>Wire.begin(<span class="hljs-number">21</span>, <span class="hljs-number">22</span>);<br>Wire.beginTransmission(<span class="hljs-number">0x20</span>);<br>Wire.write(<span class="hljs-number">0x00</span>);<br>Wire.write(<span class="hljs-number">0x00</span>);<br>Wire.endTransmission() ;<br><br><br>Wire.beginTransmission(<span class="hljs-number">0x20</span>);<br>Wire.write(<span class="hljs-number">0x12</span>);<br>Wire.write(<span class="hljs-number">0xF0</span>);<br>Wire.endTransmission() ;<br><br><br><br></code></pre></td></tr></table></figure><br>不过呢。。。还是库比较香<br>注意点<br>1.去掉不需要的头文件<br>2.Adafruit_MCP23X17 mcp;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//#include &lt;Adafruit_MCP23X08.h&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Adafruit_MCP23X17.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Wire.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUTTON_PIN 1  <span class="hljs-comment">// MCP23XXX pin button is attached to</span></span><br><br><span class="hljs-comment">// only used for SPI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CS_PIN 6</span><br><br><span class="hljs-comment">// uncomment appropriate line</span><br><span class="hljs-comment">//Adafruit_MCP23X08 mcp;</span><br>Adafruit_MCP23X17 mcp;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span> &#123;<br>  Serial.begin(<span class="hljs-number">112500</span>);<br>  Wire.begin(<span class="hljs-number">21</span>, <span class="hljs-number">22</span>);<br>  <span class="hljs-comment">//while (!Serial);</span><br>  Serial.println(<span class="hljs-string">&quot;MCP23xxx Button Test!&quot;</span>);<br><br>  <span class="hljs-comment">// uncomment appropriate mcp.begin</span><br>  <span class="hljs-keyword">if</span> (!mcp.begin_I2C()) &#123;<br>  <span class="hljs-comment">//if (!mcp.begin_SPI(CS_PIN)) &#123;</span><br>    Serial.println(<span class="hljs-string">&quot;Error.&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// configure pin for input with pull up</span><br>  mcp.pinMode(BUTTON_PIN, INPUT_PULLUP);<br><br>  mcp.pinMode(<span class="hljs-number">5</span>, OUTPUT);<br><br>  Serial.println(<span class="hljs-string">&quot;Looping...&quot;</span>);<br>  mcp.digitalWrite(<span class="hljs-number">5</span>, HIGH);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// LOW = pressed, HIGH = not pressed</span><br>  <span class="hljs-keyword">if</span> (!mcp.digitalRead(BUTTON_PIN)) &#123;<br>    Serial.println(<span class="hljs-string">&quot;Button Pressed!&quot;</span>);<br>    delay(<span class="hljs-number">250</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>arduino-ledc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20arduino-aliyun-iot-sdk%202%20%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%8E%A5%E5%85%A5%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/"/>
    <url>/2022/05/12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20arduino-aliyun-iot-sdk%202%20%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%8E%A5%E5%85%A5%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文中提到的 AliyunIoTSDK 这个 arduino 库，可以在 arduino 库商店里搜索到（搜索 AliyunIoTSDK），但是版本可能不一定是最新的，也可以手动把 github 上的项目 clone 下来，放到 arduino 的 library 库下，保证功能是最新的。</p></blockquote><blockquote><p>github 地址：<a href="https://github.com/xinyu198736/arduino-aliyun-iot-sdk">https://github.com/xinyu198736/arduino-aliyun-iot-sdk</a></p></blockquote><blockquote><p>有问题，欢迎提 issues 或 PR 共建，我对 c++ 不是特别熟悉，写出来的代码可能不一定是最合理的。</p></blockquote><h2 id="阿里云物联网平台简介"><a href="#阿里云物联网平台简介" class="headerlink" title="阿里云物联网平台简介"></a>阿里云物联网平台简介</h2><p>阿里云物联网平台提供接入物联网场景的一整套基础设施，强大的在线配置能力，基本可以实现无代码开发接入各类应用，实现大规模的物联网应用场景。</p><p>核心能力模块包括：</p><ul><li>产品&amp;设备创建和管理</li><li>服务可视化开发</li><li>控制界面可视化开发</li><li>数据分析和监控运维等辅助设施</li></ul><p>基于以上功能模块，可以快速在阿里云定义设备模型和事件等信息，然后快速创建和接入设备，再利用可视化的开发平台，可以零代码实现非常强大的功能。</p><p>不过，今天我们要介绍一个比较特殊的接入场景，使用嵌入式系统快速接入阿里云物联网平台，这里以 esp8266 为例。</p><blockquote><p>esp8266 是一款集成网络模块的嵌入式芯片，自带 32 位处理器，各种外设接口，wifi 模块等，可以使用 arduino 平台进行编程，兼容大量 arduino 库。</p></blockquote><p>本文就是以 arduino 编程方式，使用的 esp8266 开发板为 NodeMCU 1.0 ，淘宝成本仅为 8~10 元。</p><p><a name="c931653c"></a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>本次我们想利用 ESP8266 芯片实现一个简单的可远程控制的空调控制器，具备以下功能：</p><ul><li>批量部署，可通过云平台集中管理和远程控制空调开关、温度、模式等</li><li>芯片可感知环境温度、亮度，并上报物联网平台</li><li>芯片可远程触发事件，上报物联网平台</li><li>成本尽量低，不超过 30 元</li></ul><p>首先，我们进行硬件选型，经过功能评估，选用以下硬件：</p><ul><li>nodemcu 核心板（基于 esp8266） 10.89元/个</li><li>DS18B20模块 温度传感 3.18元/个</li><li>GY-30  光照传感 4.38元/个</li><li>红外发射板 3.5元/个</li><li>杜邦线母对母 1.45元/串</li><li>电源插头  1.4元/个</li><li>数据线 1.8元/个</li><li>按钮开关 0.75元/个</li></ul><p><a name="dfe89ca1"></a></p><h2 id="开始接入"><a href="#开始接入" class="headerlink" title="开始接入"></a>开始接入</h2><p>具体的连线，我们这里不展开，我们主要探讨如何使用 arduino 快速接入物联网平台。</p><p>第一步，在物联网创建产品，建立物模型，并创建设备，获取设备配置信息。</p><p><img src="http://waipian1.com/statics/images/qrcode.png" alt="image.png"><br>创建产品，并定义物模型</p><p><img src="https://blog.souche.com/content/images/2019/09/1568620350930-270bbfa3-22b8-4711-b6b8-ff6f38a8d49a.png" alt="image.png"><br>创建设备，与产品绑定，获取设备鉴权信息<br /><br><br />第二步，用 arduino 连接 nodemcu 开发板，开始硬件端的开发。<br /><br><img src="https://blog.souche.com/content/images/2019/09/1568642438839-a595c156-3afb-4ef8-8213-d67433be474a.jpeg" alt="IMG_2546.JPG"><br>具体接线可以自己研究，这里只是个展示，哈哈<br /></p><p><a name="qMAHi"></a></p><h2 id="硬件端开发"><a href="#硬件端开发" class="headerlink" title="硬件端开发"></a>硬件端开发</h2><p>这里不讨论如何使用 arduino 进行 esp8266 芯片开发，直接进入代码环节，相关基础知识可以百度一下。</p><p>首先，亮相一个我自己封装的 aliyun iot 上层 SDK（ <a href="https://github.com/xinyu198736/arduino-aliyun-iot-sdk">arduino-aliyun-iot-sdk</a> ），底层连接基于 PubSubClient 库，并且对模型操作做了一些上层封装，可以方便的发送数据和订阅远程指令。</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 引入 wifi 模块，并实例化，不同的芯片这里的依赖可能不同</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ESP8266WiFi.h&gt;</span></span><br><span class="hljs-type">static</span> WiFiClient espClient;<br><br><span class="hljs-comment">// 引入阿里云 IoT SDK</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;AliyunIoTSDK.h&gt;</span></span><br><br><span class="hljs-comment">// 设置产品和设备的信息，从阿里云设备信息里查看</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRODUCT_KEY <span class="hljs-string">&quot;xxx&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEVICE_NAME <span class="hljs-string">&quot;Device_D&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEVICE_SECRET <span class="hljs-string">&quot;xxxxxxxxxxxxxx&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> REGION_ID <span class="hljs-string">&quot;cn-shanghai&quot;</span></span><br><br><span class="hljs-comment">// 设置 wifi 信息</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIFI_SSID <span class="hljs-string">&quot;xxxxx&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WIFI_PASSWD <span class="hljs-string">&quot;xxxxx&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">115200</span>);<br>    <br>    <span class="hljs-comment">// 初始化 wifi</span><br>    <span class="hljs-built_in">wifiInit</span>(WIFI_SSID, WIFI_PASSWD);<br>    <br>    <span class="hljs-comment">// 初始化 iot，需传入 wifi 的 client，和设备产品信息</span><br>    AliyunIoTSDK::<span class="hljs-built_in">begin</span>(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID);<br>    <br>    <span class="hljs-comment">// 绑定一个设备属性回调，当远程修改此属性，会触发 powerCallback</span><br>    <span class="hljs-comment">// PowerSwitch 是在设备产品中定义的物联网模型的 id</span><br>    AliyunIoTSDK::<span class="hljs-built_in">bindData</span>(<span class="hljs-string">&quot;PowerSwitch&quot;</span>, powerCallback);<br>    <br>    <span class="hljs-comment">// 发送一个数据到云平台，LightLuminance 是在设备产品中定义的物联网模型的 id</span><br>    AliyunIoTSDK::<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;LightLuminance&quot;</span>, <span class="hljs-number">100</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    AliyunIoTSDK::<span class="hljs-built_in">loop</span>();<br>&#125;<br><br><span class="hljs-comment">// 初始化 wifi 连接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">wifiInit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *ssid, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *passphrase)</span></span><br><span class="hljs-function"></span>&#123;<br>    WiFi.<span class="hljs-built_in">mode</span>(WIFI_STA);<br>    WiFi.<span class="hljs-built_in">begin</span>(ssid, passphrase);<br>    <span class="hljs-keyword">while</span> (WiFi.<span class="hljs-built_in">status</span>() != WL_CONNECTED)<br>    &#123;<br>        <span class="hljs-built_in">delay</span>(<span class="hljs-number">1000</span>);<br>        Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;WiFi not Connect&quot;</span>);<br>    &#125;<br>    Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Connected to AP&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 电源属性修改的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">powerCallback</span><span class="hljs-params">(JsonVariant p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> PowerSwitch = p[<span class="hljs-string">&quot;PowerSwitch&quot;</span>];<br>    <span class="hljs-keyword">if</span> (PowerSwitch == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// 启动设备</span><br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>核心代码只有三句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 初始化 iot，需传入 wifi 的 client，和设备产品信息</span><br>AliyunIoTSDK::<span class="hljs-built_in">begin</span>(espClient, PRODUCT_KEY, DEVICE_NAME, DEVICE_SECRET, REGION_ID);<br><br><span class="hljs-comment">// 绑定一个设备属性回调，当远程修改此属性，会触发 powerCallback</span><br><span class="hljs-comment">// PowerSwitch 是在设备产品中定义的物联网模型的 id</span><br>AliyunIoTSDK::<span class="hljs-built_in">bindData</span>(<span class="hljs-string">&quot;PowerSwitch&quot;</span>, powerCallback);<br><br><span class="hljs-comment">// 发送一个数据到云平台，LightLuminance 是在设备产品中定义的物联网模型的 id</span><br>AliyunIoTSDK::<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;LightLuminance&quot;</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>注意这里的数据绑定和数据发送，是非常有用和方便的，不需要自己去写做匹配的代码，也不需要自己组装数据，并且会自动合并数据，节约上报的频率。</p><p>将设备配置信息配置进代码，烧录到板子，运行即可，是不是炒鸡方便呢。</p><p>注意事项：</p><ul><li>阿里云对客户端的链接参数有一些限制，需要修改  PubSubClient 的连接参数，否则无法使用<ul><li>PubSubClient 中的 MQTT_MAX_PACKET_SIZE 修改为 1024</li><li>PubSubClient 中的 MQTT_KEEPALIVE 修改为 60</li></ul></li><li>默认 5000ms 检测一次连接状态，可以通过 AliyunIoTSDK.cpp 中的 CHECK_INTERVAL 修改此值</li><li>掉线后会一直尝试重新连接，可能会触发阿里云的一些限流规则（已经做了规避），并且会导致挤掉其他同设备 ID 的设备<br><a name="ZzbqJ"></a><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3>目前 AliyunIoTSDK 这个 arduino 库，可以在 arduino 库商店里搜索到（搜索 AliyunIoTSDK），但是版本可能不一定是最新的，可以手动把 github 上的项目 clone 下来，放到 arduino 的 library 库下，保证功能是最新的。</li></ul><p>github 地址：<a href="https://github.com/xinyu198736/arduino-aliyun-iot-sdk">https://github.com/xinyu198736/arduino-aliyun-iot-sdk</a></p><p>有问题，欢迎提 issues 或 PR 共建，我对 c++ 不是特别熟悉，写出来的代码可能不一定是最合理的。</p><p><a name="gycpL"></a></p><h2 id="可视化开发界面和服务"><a href="#可视化开发界面和服务" class="headerlink" title="可视化开发界面和服务"></a>可视化开发界面和服务</h2><p>完成了设备的连接之后，已经迈出了第一步，如果你想要自己开发一个界面，可视化的控制空调，或者想利用一些远程设备的数据触发一些自定义的规则和逻辑（例如如果某个数据超标，报警到钉钉群等），用阿里云的物联网平台的话，这些都不需要自己去开发，直接使用物联网平台的“开发服务”拖拖拽拽即可完成。</p><p><a name="7z0mV"></a></p><h3 id="界面开发"><a href="#界面开发" class="headerlink" title="界面开发"></a>界面开发</h3><p>界面开发的核心是 拖动布局、数据源绑定、交互绑定、自定义变量等。<br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568630094545-d440e173-23f0-4d63-81e7-00d6b6ce8811.png" alt="image.png"><br>布局界面，右侧可以设置各种控件属性<br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568630244900-18ee8b99-1e80-409a-8482-981fd596d095.png" alt="image.png"><br>数据源绑定，可以方便的和产品模型数据绑定<br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568630294665-d5cf7a85-ad06-491c-a7bf-65f6439450f8.png" alt="image.png"><br>交互绑定，可以与服务进行绑定，触发某个服务，并传入设备属性<br /><br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568642695402-cc25fedc-8c3f-4e32-90a9-89c0eec2f712.png" alt="image.png"><br>控件可以给自定义变量赋值，其他组件可以与变量绑定</p><p>使用上述的功能，加上各种设备绑定功能，基本可以完成一个很复杂的界面的开发，但是如果你需要通过交互触发远程指令，或者监听远程的数据做一些判断逻辑，光有界面是不够的。</p><p><a name="D26H8"></a></p><h3 id="服务开发"><a href="#服务开发" class="headerlink" title="服务开发"></a>服务开发</h3><p>上面提到的逻辑开发，就需要使用“服务开发”了，服务开发的触发点主要是两类：设备触发、界面交互触发。</p><p><img src="https://blog.souche.com/content/images/2019/09/1568643025480-f10c038d-8a9b-44a1-b270-51625b56a137.png" alt="image.png"><br>设备触发的服务，中间的路径选择是用来做条件判断分流的，最右侧是触发通知逻辑节点<br /><br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568643229960-62754bc2-4ddf-4724-ba99-ed81459f9bc2.png" alt="image.png"><br>一个温度控制服务，通过界面控件触发，最终生成设备控制逻辑<br /></p><p><a name="UnwgK"></a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文不是 arduino 教学，也不是 esp8266 教学，更不是硬件教学，所以没有展开细节，需要读者具备一定的基础，请各位谅解，如果对 arduino 开发感兴趣，可以加我微信交流（微信号：mier963，注明 arduino）。</p><p>最后展示一下成果：<br /><br><img src="https://blog.souche.com/content/images/2019/09/1568643588452-48f528a4-29e2-41f9-99bb-0a004600bd8a.jpeg" alt="IMG_7254.JPG"><br>一个成品，包含四个传感器模块，包括一个硬件按钮<br /><br><br /><br><img src="https://blog.souche.com/content/images/2019/09/1568643652167-2f7d14b9-77d4-4a36-8172-ad7e9b9bc2ae.png" alt="image.png"><br>空调远程控制界面<br /><br><br />另外，还可以给这个控制器加入一些很有意思的功能，例如定点关闭所有设备，根据环境亮度开关空调等。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>5-11</title>
    <link href="/2022/05/11/5-11/"/>
    <url>/2022/05/11/5-11/</url>
    
    <content type="html"><![CDATA[<p>今天打球被撞了，然后也基本上前一个半小时一个球没进，投了这么多，不进，还把眼睛擦伤了，心情不免会不太好，这确实是不可避免的有一点沮丧，但我总觉得应该在某些地方想开一点</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>stm32</title>
    <link href="/2022/05/10/stm32/"/>
    <url>/2022/05/10/stm32/</url>
    
    <content type="html"><![CDATA[<p>1.更改定时器的占空比</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c">TIM_SetCompare1(TIM3,i);<br></code></pre></td></tr></table></figure><p>2.更新定时器的分频（第一级分频)和自动重装载（ARR)<br>ARR可以理解为这次计数计到顶之后重新设置阈值的意思<br> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">TIM8-&gt;PSC = usPrescaler;<br>   TIM8-&gt;ARR = usPeriod; <br>   TIM8-&gt;EGR = TIM_EGR_UG;         <span class="hljs-comment">//修改之后要更新寄存器</span><br></code></pre></td></tr></table></figure></p><hr><p>date: 2022-05-10 17:22:52<br>tags: tim</p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>tim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.10MQTT ESP8266</title>
    <link href="/2022/05/10/5-10MQTT/"/>
    <url>/2022/05/10/5-10MQTT/</url>
    
    <content type="html"><![CDATA[<p>1.百度智能云虽然写着8884端口，但是客户端连接的时候还是1883<br>MQTT并不会想不冲突，也不会谁把谁顶下线，原因就是因为<br>           使用了相同的Client ID<br>2.串口读数据</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (Serial.available()&gt;<span class="hljs-number">0</span>)<br>  &#123;<br>String datafd= Serial.readString();<br>Serial.println(datafd);<br>  &#125;<br></code></pre></td></tr></table></figure><p>3.arduino关于esp32使用指定串口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">HardwareSerial <span class="hljs-title function_">mySerial1</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>;<br>mySerial1.begin(<span class="hljs-number">115200</span>,SERIAL_8N1,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>);<br>mySerial1.print(symbol);<br>mySerial1.println(data);<br></code></pre></td></tr></table></figure><p>4.AI2制作MQTTAPP<br>在论坛搜索MQTT的拓展，然后导入即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>MQTT,串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外部中断</title>
    <link href="/2022/05/09/%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/"/>
    <url>/2022/05/09/%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p>date: 2022-05-09 10:54:01</p><p>1.外部中断内不可以加延迟，假设延时，他还没结束，又来了中断，这样就反复循环嵌套了。<br>所以应该不能够消抖。尽量用在主函数里轮询吧。</p><p>2.中断优先级越小，越优先<br>所谓多任务，也就是单核快速的处理，当处理完当前任务，如stm32把八个寄存器（关键的是PC,他直接决定了中断退出以后开始执行的位置,R0-R3,R12则保存了一些中间变量,保证了恢复现场以后程序正确执行）全都压入栈，然后切到下个任务，把这个任务的八个寄存器出栈，做完了当前任务再压栈</p><p>3.ADC 逐次逼近式 又称SAR　ｒｅｇｉｓｔｅｒ<br>类似二分法，DAC一直通过电压比较器，最后比较出来<br>如果是使用最小板的ADC，如果不正常工作，那么要检查ＶＲＥｆ　＋　　－　是否接高电平和接地了</p><figure class="highlight subunit"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span>中断 ADC<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/05/08/5.8-LVGL/"/>
    <url>/2022/05/08/5.8-LVGL/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="LVGL"><a href="#LVGL" class="headerlink" title="LVGL"></a>LVGL</h2><p>日期：5.8<br>  今天学习了LVGL，整体思路是初始化SPI ，然后初始化I2C(用来判断TP  touchpanel)</p><p>1.结构体不能初始化,typdef struct是分号  enmu是逗号</p><p>2.结构体赋值的时候有的好像要加（）<br>3.调用结构体的时候不能直呼其名，比如</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">boards_info_t</span> *g_board = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LVGL</title>
    <link href="/2022/05/05/hello-world/"/>
    <url>/2022/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>日期：5.8<br>##标题1<br>###标题2</p><blockquote><p>这是一段引用</p></blockquote><p>把大象塞进去<br>1.赛<br>2.的哈哈<br>3.大大撒</p><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-number">666</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
